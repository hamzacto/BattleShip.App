@page "/"

@inject HttpClient Http
@inject IJSRuntime JS
@using BattleShip.API.Model;

@code {
    private BattleShip.API.Model.GameState gameState;
    private bool isGameStarted = false;
    private bool isGameOver = false;
    private GameState game;
    private BattleHistory battleHistory;
    private string winnerMessage = string.Empty;
    private string botId = "bot";
    // Player and opponent IDs, set through user input or retrieved from API
    private string playerId = "player1";
    private string opponentPlayerId = "player2";
    private int undoNumberSteps = 0;
    private bool showHistory = false;

    // Game ID after starting
    private string gameId;

    // Fetch game details (for continuing a game)
    private async Task FetchGame()
    {
        var response = await Http.GetAsync($"http://localhost:5192/api/game/{gameId}");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            gameState = System.Text.Json.JsonSerializer.Deserialize<BattleShip.API.Model.GameState>(json, new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

            //isGameStarted = !gameState.IsGameOver;
            isGameOver = gameState.IsGameOver;
        }
    }

    // Start a new game
    private async Task StartNewGame()
    {
        var content = new StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
        var response = await Http.PostAsync($"http://localhost:5192/api/game/start?playerId={playerId}&opponentPlayerId={botId}", content);

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            gameState = System.Text.Json.JsonSerializer.Deserialize<BattleShip.API.Model.GameState>(json, new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

            gameId = gameState.GameId;
            isGameStarted = true;
            isGameOver = false;
        }
    }

    // Simple Bot Logic: Makes a random move on the player's grid
    private async Task BotMakeMove()
    {

    }

    private async Task undoMove()
    {
        var response = await Http.PostAsync($"http://localhost:5192/api/game/{gameId}/undo", null);

        if (response.IsSuccessStatusCode)
        {
            await FetchGame();
        }
    }

    private async Task undoXMove()
    {
        var response = await Http.PostAsync($"http://localhost:5192/api/game/{gameId}/undo/{undoNumberSteps}", null);

        if (response.IsSuccessStatusCode)
        {
            await FetchGame();
            undoNumberSteps = 0;
        }
    }


    // Make a move
    private async Task MakeMove(int x, int y)
    {
        var response = await Http.PostAsync($"http://localhost:5192/api/game/{gameId}/move?playerId={playerId}&x={x}&y={y}", null);

        var json = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            var random = new Random();
            bool validMove = false;

            int xr = random.Next(0, 10);
            int yr = random.Next(0, 10);

            var response_bot = await Http.PostAsync($"http://localhost:5192/api/game/{gameId}/move?playerId={botId}&x={xr}&y={yr}", null);

            await FetchGame();
        }     
    }

    private async Task GetHistory()
    {
        var response = await Http.GetAsync($"http://localhost:5192/api/game/{gameId}/history");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            battleHistory = System.Text.Json.JsonSerializer.Deserialize<BattleShip.API.Model.BattleHistory>(json, new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

            showHistory = true;

        }
    }
    // Check game state for winner
    private bool CheckGameOver()
    {
        return gameState?.IsGameOver ?? false;
    }

    // Reset the game
    private async Task ResetGame()
    {
        var response = await Http.PostAsync($"http://localhost:5192/api/game/{gameId}/restart", null);
        if (response.IsSuccessStatusCode)
        {
            await StartNewGame();
        }
    }

    private async Task BackToGame()
    {
        showHistory = false;
    }
}
<!-- UI for the Game -->
@if (isGameStarted && !isGameOver && !showHistory)
{
    <div>
        <h3>Battle Ship Game</h3>
        <button @onclick="() => undoMove()">Undo move</button>
        <button @onclick="() => ResetGame()">Restart Game</button>
        <span>Undo X moves</span><input type="text" @bind="@undoNumberSteps"/>
        @if (undoNumberSteps > 0)
        {
            <button @onclick="() => undoXMove()">Undo @undoNumberSteps moves</button>
        }
        <button @onclick="() => GetHistory()">Fetch history</button>

    </div>

    <div class="game-board">
        <!-- Display Player Grid -->
        <div class="player-grid">
            <h4>Your Grid</h4>
            @for (int i = 0; i < 10; i++)
            {
                <div>
                    @for (int j = 0; j < 10; j++)
                    {

                        <button class="grid-cell">@gameState?.PlayerGrid?[i][j]</button>
                    }
                </div>
            }
        </div>

        <!-- Display Opponent Grid -->
        <div class="opponent-grid">
            <h4>Opponent Grid</h4>
            @for (int i = 0; i < 10; i++)
            {
                <div>
                    @for (int j = 0; j < 10; j++)
                    {
                        int localI = i;
                        int localJ = j;

                        <button class="grid-cell" @onclick="() => MakeMove(localI, localJ)">
                            @gameState?.OpponentGrid?[localI]?[localJ]
                        </button>
                    }
                </div>
            }
        </div>
    </div>

}
else
{
    <!-- Show Game Over and Winner -->
    @if (isGameOver)
    {
        <h4>Game Over! Winner: @gameState?.WinnerId</h4>
        <button class="btn btn-primary" @onclick="ResetGame">Restart Game</button>
    }
    if (!isGameStarted)
    {
        <h3>Start a New Game</h3>
        <button class="btn btn-primary" @onclick="StartNewGame">Start Game</button>
    }
}

@if (showHistory)
{
    <button class="button" @onclick="BackToGame">Back To Game</button>
    <div class="container mx-auto p-4">
        @if (battleHistory == null)
        {
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">Battle History - Game #@battleHistory.GameId</h2>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Move #</th>
                                    <th>Player</th>
                                    <th>Position</th>
                                    <th>Result</th>
                                    <th>Ship Hit</th>
                                    <th>Time</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var move in battleHistory.Moves.OrderBy(m => m.MoveNumber))
                                {
                                    <tr class="@(move.IsHit ? "table-success" : "table-danger")">
                                        <td>@move.MoveNumber</td>
                                        <td>@move.PlayerId</td>
                                        <td>(@move.X, @move.Y)</td>
                                        <td>
                                            @if (move.IsHit)
                                            {
                                                <span class="badge bg-success">Hit!</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Miss</span>
                                            }
                                        </td>
                                        <td>
                                            @if (move.hitedShipType.HasValue)
                                            {
                                                <span class="badge bg-info">@move.hitedShipType</span>
                                            }
                                            else
                                            {
                                                <span>-</span>
                                            }
                                        </td>
                                        <td>@move.Timestamp.ToString("MM/dd/yyyy HH:mm:ss")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="mt-4">
                        <h4>Battle Statistics</h4>
                        <div class="row">
                            <div class="col-md-3">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h5>Total Moves</h5>
                                        <p class="h3">@battleHistory.Moves.Count</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h5>Total Hits</h5>
                                        <p class="h3">@battleHistory.Moves.Count(m => m.IsHit)</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h5>Hit Ratio</h5>
                                        <p class="h3">@($"{(battleHistory.Moves.Any() ? (double)battleHistory.Moves.Count(m => m.IsHit) / battleHistory.Moves.Count * 100 : 0):F1}%")</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h5>Battle Duration</h5>
                                        <p class="h3">
                                            @{
                                                var duration = battleHistory.Moves.Any()
                                                ? battleHistory.Moves.Max(m => m.Timestamp) - battleHistory.Moves.Min(m => m.Timestamp)
                                                : TimeSpan.Zero;
                                                @($"{duration.Minutes}m {duration.Seconds}s")
                                            }
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}