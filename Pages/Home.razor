@page "/"

@inject HttpClient Http
@inject IJSRuntime JS
@using BattleShip.API.Model;

@code {
    private BattleShip.API.Model.GameState gameState;
    private bool isGameStarted = false;
    private bool isGameOver = false;
    private GameState game;
    private BattleHistory battleHistory;
    private string winnerMessage = string.Empty;
    private string botId = "bot";
    // Player and opponent IDs, set through user input or retrieved from API
    private string playerId = "player1";
    private string opponentPlayerId = "player2";
    private int undoNumberSteps = 0;
    private bool showHistory = false;

    // Game ID after starting
    private string gameId;

    // Fetch game details (for continuing a game)
    private async Task FetchGame()
    {
        var response = await Http.GetAsync($"http://localhost:5192/api/game/{gameId}");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            gameState = System.Text.Json.JsonSerializer.Deserialize<BattleShip.API.Model.GameState>(json, new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

            //isGameStarted = !gameState.IsGameOver;
            isGameOver = gameState.IsGameOver;
        }
    }

    // Start a new game
    private async Task StartNewGame()
    {
        var content = new StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
        var response = await Http.PostAsync($"http://localhost:5192/api/game/start?playerId={playerId}&opponentPlayerId={botId}", content);

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            gameState = System.Text.Json.JsonSerializer.Deserialize<BattleShip.API.Model.GameState>(json, new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

            gameId = gameState.GameId;
            isGameStarted = true;
            isGameOver = false;
        }
    }

    // Simple Bot Logic: Makes a random move on the player's grid
    private async Task BotMakeMove()
    {
        var random = new Random();
        bool validMove = false;

        while (!validMove)
        {
            int xr = random.Next(0, 10);
            int yr = random.Next(0, 10);
            if (gameState?.PlayerGrid?[xr][yr] != 'X' && gameState?.PlayerGrid?[xr][yr] != 'O' )
            {
                validMove = true;
                var response_bot = await Http.PostAsync($"http://localhost:5192/api/game/{gameId}/move?playerId={botId}&x={xr}&y={yr}", null);

            }
        }
        await FetchGame();
    }

    private async Task undoMove()
    {
        var response = await Http.PostAsync($"http://localhost:5192/api/game/{gameId}/undo", null);

        if (response.IsSuccessStatusCode)
        {
            await FetchGame();
        }
    }

    private async Task undoXMove()
    {
        var response = await Http.PostAsync($"http://localhost:5192/api/game/{gameId}/undo/{undoNumberSteps}", null);

        if (response.IsSuccessStatusCode)
        {
            await FetchGame();
            undoNumberSteps = 0;
        }
    }


    // Make a move
    private async Task MakeMove(int x, int y)
    {
        var response = await Http.PostAsync($"http://localhost:5192/api/game/{gameId}/move?playerId={playerId}&x={x}&y={y}", null);

        var json = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            await BotMakeMove();
        }     
    }

    private async Task GetHistory()
    {
        var response = await Http.GetAsync($"http://localhost:5192/api/game/{gameId}/history");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            battleHistory = System.Text.Json.JsonSerializer.Deserialize<BattleShip.API.Model.BattleHistory>(json, new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

            showHistory = true;

        }
    }
    // Check game state for winner
    private bool CheckGameOver()
    {
        return gameState?.IsGameOver ?? false;
    }

    // Reset the game
    private async Task ResetGame()
    {
        var response = await Http.PostAsync($"http://localhost:5192/api/game/{gameId}/restart", null);
        if (response.IsSuccessStatusCode)
        {
            await StartNewGame();
        }
    }

    private async Task BackToGame()
    {
        showHistory = false;
    }
}
<div class="game-container">
    @if (isGameStarted && !isGameOver && !showHistory)
    {
        <div class="game-header">
            <h2 class="text-xl font-bold text-gray-800">Battleship</h2>
            <div class="controls">
                <button @onclick="undoMove" class="btn btn-secondary btn-sm">
                    <i class="fas fa-undo">Undo Last Move</i>
                </button>
                <div class="undo-steps">
                    <input type="number"
                           @bind="undoNumberSteps"
                           class="w-16 px-1 py-1 border rounded text-sm"
                           min="1"
                           max="10" />
                    @if (undoNumberSteps > 0)
                    {
                        <button @onclick="undoXMove" class="btn btn-secondary btn-sm">
                            Undo @undoNumberSteps
                        </button>
                    }
                </div>
                <button @onclick="GetHistory" class="btn btn-info btn-sm">
                    <i class="fas fa-history">Get History</i>
                </button>
                <button @onclick="ResetGame" class="btn btn-warning btn-sm">
                    <i class="fas fa-sync-alt">Reset Game</i>
                </button>
            </div>
        </div>

        <div class="game-boards">
            <!-- Player Grid -->
            <div class="grid-container player-side">
                <div class="grid-header">
                    <h3 class="text-sm font-semibold text-gray-700">Your Fleet</h3>
                    <div class="grid-badge player">Player</div>
                </div>
                <div class="grid-board">
                    @for (int i = 0; i < 10; i++)
                    {
                        <div class="grid-row">
                            @for (int j = 0; j < 10; j++)
                            {
                                var cell = gameState?.PlayerGrid?[i][j];
                                <div class="@GetPlayerCellClass(cell)">
                                    @GetCellContent(cell)
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- Opponent Grid -->
            <div class="grid-container opponent-side">
                <div class="grid-header">
                    <h3 class="text-sm font-semibold text-gray-700">Enemy Waters</h3>
                    <div class="grid-badge opponent">Opponent</div>
                </div>
                <div class="grid-board">
                    @for (int i = 0; i < 10; i++)
                    {
                        <div class="grid-row">
                            @for (int j = 0; j < 10; j++)
                            {
                                int localI = i;
                                int localJ = j;
                                var cell = gameState?.OpponentGrid?[i][j];
                                <button @onclick="() => MakeMove(localI, localJ)"
                                        class="@GetOpponentCellClass(cell)"
                                        disabled="@IsCellDisabled(cell)">
                                    @GetCellContent(cell, true)
                                </button>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="game-start">
            @if (isGameOver)
            {
                <div class="text-center">
                    <h2 class="text-2xl font-bold mb-3">Game Over!</h2>
                    <div class="winner-banner">
                        <p class="text-xl">Winner: @gameState?.WinnerId</p>
                    </div>
                    <button @onclick="ResetGame" class="btn btn-primary">
                        Play Again
                    </button>
                </div>
            }
            else if (!isGameStarted)
            {
                <div class="text-center">
                    <h2 class="text-2xl font-bold mb-3">Battleship</h2>
                    <p class="text-gray-600 mb-4 text-sm">Prepare for naval warfare!</p>
                    <button @onclick="StartNewGame" class="btn btn-primary">
                        Start New Game
                    </button>
                </div>
            }
        </div>
    }
</div>
<style>
    .game-container {
        max-width: 2000px;
        margin: 0 auto;
        padding: 1rem;
    }

    .game-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: white;
        padding: 0.75rem;
        border-radius: 0.375rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
    }

    .controls {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .undo-steps {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .game-boards {
        display: flex;
        gap: 2rem;
        justify-content: center;
        align-items: flex-start;
    }

    .grid-container {
        flex: 1;
        max-width: 500px;
        background: white;
        padding: 0.75rem;
        border-radius: 0.375rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .grid-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
    }

    .grid-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .grid-badge.player {
        background: #e3f2fd;
        color: #1976d2;
    }

    .grid-badge.opponent {
        background: #ffebee;
        color: #d32f2f;
    }

    .grid-board {
        display: grid;
        gap: 1px;
        background: #ddd;
        padding: 1px;
        border-radius: 3px;
    }

    .grid-row {
        display: grid;
        grid-template-columns: repeat(10, 1fr);
        gap: 1px;
    }

    .grid-cell {
        aspect-ratio: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.75rem;
        transition: all 0.2s;
    }

    .cell-water { background: #e3f2fd; }
    .cell-ship { background: #90caf9; }
    .cell-hit { background: #ef5350; color: white; }
    .cell-miss { background: #90a4ae; }

    .opponent .cell-water:hover:not(:disabled) {
        background: #bbdefb;
        cursor: pointer;
        transform: scale(1.1);
    }

    .winner-banner {
        background: linear-gradient(to right, #7c3aed, #ec4899);
        color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }

    .game-start {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 300px;
    }


    .opponent .cell-water:hover:not(:disabled) {
        background: #bbdefb;
        cursor: pointer;
        transform: scale(1.1);
        box-shadow: 0 0 5px rgba(25, 118, 210, 0.3);
    }

    /* Enhanced visibility for hits and misses */
    .cell-hit {
        background: #ef5350;
        color: white;
        font-weight: bold;
        font-size: 1rem;
    }

    .cell-miss {
        background: #90a4ae;
        color: #eee;
        font-size: 0.875rem;
    }

    /* Add a subtle pattern to unopened cells to make them more visually interesting */
    .opponent .cell-water {
        background: repeating-linear-gradient( 45deg, #e3f2fd, #e3f2fd 5px, #e6f3fd 5px, #e6f3fd 10px );
    }

</style>

@code {
    private string GetPlayerCellClass(char? cell) => cell switch
    {
        'S' => "grid-cell cell-ship",
        'A' => "grid-cell cell-ship",
        'B' => "grid-cell cell-ship",
        'C' => "grid-cell cell-ship",
        'M' => "grid-cell cell-ship",
        'D' => "grid-cell cell-ship",
        'X' => "grid-cell cell-hit",
        'O' => "grid-cell cell-miss",
        _ => "grid-cell cell-water"
    };

    private string GetOpponentCellClass(char? cell) => cell switch
    {
        'S' => "grid-cell cell-water",
        'A' => "grid-cell cell-water",
        'B' => "grid-cell cell-water",
        'C' => "grid-cell cell-water",
        'M' => "grid-cell cell-water",
        'D' => "grid-cell cell-water",
        'X' => "grid-cell cell-hit",
        'O' => "grid-cell cell-miss",
        _ => "grid-cell cell-water"
    };

    private string GetCellContent(char? cell, bool isOpponent = false) => (cell, isOpponent) switch
    {
        ('X', _) => "💥",       // Show hits for both grids
        ('O', _) => "•",       // Show misses for both grids
        ('S', false) => "🚢",   // Show ships only on player's grid
        ('S', true) => "",     // Hide ships on opponent's grid
        ('D', false) => "🚢",   // Show ships only on player's grid
        ('D', true) => "",     // Hide ships on opponent's grid
        ('A', false) => "🚢",   // Show ships only on player's grid
        ('A', true) => "",     // Hide ships on opponent's grid
        ('B', false) => "🚢",   // Show ships only on player's grid
        ('B', true) => "",     // Hide ships on opponent's grid
        ('C', false) => "🚢",   // Show ships only on player's grid
        ('C', true) => "",     // Hide ships on opponent's grid
        ('M', false) => "🚢",   // Show ships only on player's grid
        ('M', true) => "",     // Hide ships on opponent's grid
        _ => ""
    };

    private bool IsCellDisabled(char? cell) => cell is 'O' or 'X';
}

@if (showHistory)
{
    <button class="button" @onclick="BackToGame">Back To Game</button>
    <div class="container mx-auto p-4">
        @if (battleHistory == null)
        {
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">Battle History - Game #@battleHistory.GameId</h2>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Move #</th>
                                    <th>Player</th>
                                    <th>Position</th>
                                    <th>Result</th>
                                    <th>Ship Hit</th>
                                    <th>Time</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var move in battleHistory.Moves.OrderBy(m => m.MoveNumber))
                                {
                                    <tr class="@(move.IsHit ? "table-success" : "table-danger")">
                                        <td>@move.MoveNumber</td>
                                        <td>@move.PlayerId</td>
                                        <td>(@move.X, @move.Y)</td>
                                        <td>
                                            @if (move.IsHit)
                                            {
                                                <span class="badge bg-success">Hit!</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Miss</span>
                                            }
                                        </td>
                                        <td>
                                            @if (move.hitedShipType.HasValue)
                                            {
                                                <span class="badge bg-info">@move.hitedShipType</span>
                                            }
                                            else
                                            {
                                                <span>-</span>
                                            }
                                        </td>
                                        <td>@move.Timestamp.ToString("MM/dd/yyyy HH:mm:ss")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="mt-4">
                        <h4>Battle Statistics</h4>
                        <div class="row">
                            <div class="col-md-3">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h5>Total Moves</h5>
                                        <p class="h3">@battleHistory.Moves.Count</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h5>Total Hits</h5>
                                        <p class="h3">@battleHistory.Moves.Count(m => m.IsHit)</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h5>Hit Ratio</h5>
                                        <p class="h3">@($"{(battleHistory.Moves.Any() ? (double)battleHistory.Moves.Count(m => m.IsHit) / battleHistory.Moves.Count * 100 : 0):F1}%")</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h5>Battle Duration</h5>
                                        <p class="h3">
                                            @{
                                                var duration = battleHistory.Moves.Any()
                                                ? battleHistory.Moves.Max(m => m.Timestamp) - battleHistory.Moves.Min(m => m.Timestamp)
                                                : TimeSpan.Zero;
                                                @($"{duration.Minutes}m {duration.Seconds}s")
                                            }
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}